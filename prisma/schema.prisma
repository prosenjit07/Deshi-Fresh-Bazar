// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE")
  directUrl = env("NEXT_PUBLIC_SUPABASE_URL")
}
        
// User model
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  cart          CartItem[]
}

enum Role {
  USER
  ADMIN
}

// Product model
model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String      @db.Text
  price       Float
  image       String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  packages    Package[]
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Package model (for different product packages/options)
model Package {
  id          String    @id @default(cuid())
  name        String
  price       Float
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Order model
model Order {
  id                String      @id @default(cuid())
  user             User?       @relation(fields: [userId], references: [id])
  userId           String?
  customerName     String
  customerEmail    String?
  customerPhone    String
  shippingAddress  String
  shippingCity     String
  shippingPostalCode String
  shippingCountry  String
  subtotal         Float
  shippingCost     Float
  totalAmount      Float
  paymentMethod    String
  status           OrderStatus @default(PENDING)
  items            OrderItem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// OrderItem model
model OrderItem {
  id          String    @id @default(cuid())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  productName String
  productImage String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  packageType String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// CartItem model
model CartItem {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  selectedPackage String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, productId, selectedPackage])
} 